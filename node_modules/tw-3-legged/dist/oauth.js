"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeAuthorizationHeader = void 0;
var crypto_1 = require("crypto");
var byte_1 = require("./byte");
var date_1 = require("./date");
function encodeAndJoinArray(arr, separator) {
    return arr.map(encodeURIComponent).join(separator);
}
function makeSignatureBaseString(method, endpoint, params) {
    var sortedKeys = Object.keys(params).sort();
    var paramPairs = sortedKeys.map(function (key) { return [key, params[key]]; });
    var paramString = new URLSearchParams(paramPairs).toString();
    return encodeAndJoinArray([method.toUpperCase(), endpoint, paramString], "&");
}
function makeSignatureKey(consumerSecret, accessTokenSecret) {
    if (accessTokenSecret === void 0) { accessTokenSecret = ""; }
    return encodeAndJoinArray([consumerSecret, accessTokenSecret], "&");
}
function oauthParamsToString(params) {
    return Object.entries(params)
        .map(function (_a) {
        var _b = __read(_a, 2), k = _b[0], v = _b[1];
        return encodeURIComponent(k) + "=\"" + encodeURIComponent(v) + "\"";
    })
        .join(", ");
}
function makeAuthorizationHeader(method, endpoint, consumerKey, consumerSecret, additionalParams) {
    if (additionalParams === void 0) { additionalParams = {}; }
    var oauthParams = __assign({ oauth_consumer_key: consumerKey, oauth_signature_method: "HMAC-SHA1", oauth_timestamp: Math.floor(date_1.getNow() / 1000).toString(), oauth_version: "1.0a", oauth_nonce: byte_1.getRandomBytes(32).toString("base64") }, additionalParams);
    var key = makeSignatureKey(consumerSecret);
    var base = makeSignatureBaseString(method, endpoint, oauthParams);
    var value = oauthParamsToString(__assign(__assign({}, oauthParams), { oauth_signature: crypto_1.createHmac("sha1", key).update(base).digest("base64") }));
    return "OAuth " + value;
}
exports.makeAuthorizationHeader = makeAuthorizationHeader;
